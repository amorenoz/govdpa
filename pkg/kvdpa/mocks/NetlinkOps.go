// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	nl "github.com/vishvananda/netlink/nl"
)

// NetlinkOps is an autogenerated mock type for the NetlinkOps type
type NetlinkOps struct {
	mock.Mock
}

// NewAttribute provides a mock function with given fields: attrType, data
func (_m *NetlinkOps) NewAttribute(attrType int, data interface{}) (*nl.RtAttr, error) {
	ret := _m.Called(attrType, data)

	var r0 *nl.RtAttr
	if rf, ok := ret.Get(0).(func(int, interface{}) *nl.RtAttr); ok {
		r0 = rf(attrType, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nl.RtAttr)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, interface{}) error); ok {
		r1 = rf(attrType, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunVdpaNetlinkCmd provides a mock function with given fields: command, flags, data
func (_m *NetlinkOps) RunVdpaNetlinkCmd(command uint8, flags int, data []*nl.RtAttr) ([][]byte, error) {
	ret := _m.Called(command, flags, data)

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func(uint8, int, []*nl.RtAttr) [][]byte); ok {
		r0 = rf(command, flags, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint8, int, []*nl.RtAttr) error); ok {
		r1 = rf(command, flags, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
